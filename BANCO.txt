-- CRIAÇÃO DAS TABELAS

CREATE TABLE CLIENTES (
    IDCLIENTE INT PRIMARY KEY IDENTITY,
    NOME VARCHAR(50) NOT NULL,
    CPF VARCHAR(11) NOT NULL UNIQUE,
    SEXO CHAR(1) NOT NULL CHECK (SEXO IN ('M', 'F'))
);
GO

CREATE TABLE CARROS (
    IDCARRO INT PRIMARY KEY IDENTITY,
    MODELO VARCHAR(30) NOT NULL,
    MARCA VARCHAR(30) NOT NULL,
    COR VARCHAR(15) NOT NULL,
    CHASSI VARCHAR(17) NOT NULL UNIQUE,
    ANO INT NOT NULL,
    PRECO_DIA FLOAT NOT NULL
);
GO

CREATE TABLE ALUGUEIS (
    IDALUGUEL INT PRIMARY KEY IDENTITY,
    IDCLIENTE INT NOT NULL,
    IDCARRO INT NOT NULL,
    DATA_INICIAL DATE NOT NULL,
    DATA_FINAL DATE NOT NULL,
    VALOR_ALUGUEL FLOAT NOT NULL,
    FOREIGN KEY (IDCLIENTE) REFERENCES CLIENTES(IDCLIENTE),
    FOREIGN KEY (IDCARRO) REFERENCES CARROS(IDCARRO)
);
GO

CREATE TABLE PAGAMENTOS (
    IDPAGAMENTO INT PRIMARY KEY IDENTITY,
    IDALUGUEL INT NOT NULL,
    METODO VARCHAR(10) NOT NULL CHECK (METODO IN ('DEBITO', 'CREDITO', 'DINHEIRO')),
    DATA_PAGAMENTO DATE NOT NULL,
    FOREIGN KEY (IDALUGUEL) REFERENCES ALUGUEIS(IDALUGUEL)
);
GO

-- CONSULTA PARA VER CLIENTES, CARROS E VALORES DE ALUGUEL

SELECT C.NOME, CAR.MODELO, A.VALOR_ALUGUEL
FROM ALUGUEIS A
INNER JOIN CLIENTES C ON A.IDCLIENTE = C.IDCLIENTE
INNER JOIN CARROS CAR ON A.IDCARRO = CAR.IDCARRO;
GO

-- CONSULTA PARA VERIFICAR CARROS DISPONÍVEIS (NÃO ALUGADOS)

SELECT C.MODELO, C.MARCA
FROM CARROS C
LEFT JOIN ALUGUEIS A ON C.IDCARRO = A.IDCARRO
WHERE A.IDALUGUEL IS NULL;
GO

-- UPDATE PARA ASSOCIAR ALUGUÉIS A CLIENTES (EXEMPLO COM 10 REGISTROS)

UPDATE ALUGUEIS 
SET IDCLIENTE = (SELECT TOP 1 IDCLIENTE FROM CLIENTES ORDER BY NEWID())
WHERE IDALUGUEL IN (1,2,3,4,5,6,7,8,9,10);
GO

-- EXEMPLO USANDO CHARINDEX PARA ENCONTRAR UMA MARCA DENTRO DE UM NOME DE CARRO

SELECT MODELO, MARCA
FROM CARROS
WHERE CHARINDEX('Ford', MARCA) > 0;
GO

-- CRIAÇÃO DA TABELA PARA ARMAZENAR DADOS DE EXCLUSÕES E UPDATES

CREATE TABLE LOG_ALTERACOES (
    IDLOG INT PRIMARY KEY IDENTITY,
    ACAO VARCHAR(10),
    TABELA_AFETADA VARCHAR(50),
    DATA_ALTERACAO DATETIME DEFAULT GETDATE(),
    USUARIO VARCHAR(50)
);
GO

-- TRIGGER PARA REGISTRAR EXCLUSÕES E UPDATES NA TABELA CLIENTES

CREATE TRIGGER TRG_LOG_CLIENTES 
ON CLIENTES
AFTER UPDATE, DELETE
AS
BEGIN
    INSERT INTO LOG_ALTERACOES (ACAO, TABELA_AFETADA, USUARIO)
    SELECT 
        CASE 
            WHEN EXISTS (SELECT * FROM deleted) AND EXISTS (SELECT * FROM inserted) THEN 'UPDATE'
            WHEN EXISTS (SELECT * FROM deleted) THEN 'DELETE'
        END,
        'CLIENTES',
        SUSER_NAME();
END;
GO

-- STORED PROCEDURE PARA CONSULTAR CLIENTES QUE ALUGARAM UM CARRO

CREATE PROCEDURE SP_CLIENTES_COM_ALUGUEIS
AS
BEGIN
    SELECT C.NOME, COUNT(A.IDALUGUEL) AS TOTAL_ALUGUEIS
    FROM CLIENTES C
    INNER JOIN ALUGUEIS A ON C.IDCLIENTE = A.IDCLIENTE
    GROUP BY C.NOME
    ORDER BY TOTAL_ALUGUEIS DESC;
END;
GO

-- EXECUÇÃO DA STORED PROCEDURE
EXEC SP_CLIENTES_COM_ALUGUEIS;
GO
